<program>program<declaration-list>declaration-list<declaration>declaration<type-specifier>type-specifier<token>int</token> + 
</type-specifier><token>ID</token> + 
<declaration-a>declaration-a<var-declaration>var-declaration<token>;</token> + 
</var-declaration></declaration-a></declaration><declaration-list>declaration-list<declaration>declaration<type-specifier>type-specifier<token>int</token> + 
</type-specifier><token>ID</token> + 
<declaration-a>declaration-a<fun-declaration>fun-declaration<token>(</token> + 
<params>params<token>int</token> + 
<token>ID</token> + 
<param-a>param-a<token>EPSILON</token> + 
</param-a><param-list>param-list<token>EPSILON</token> + 
</param-list></params><token>)</token> + 
<compound-stmt>compound-stmt<token>{</token> + 
<declaration-list>declaration-list<declaration>declaration<type-specifier>type-specifier<token>void</token> + 
</type-specifier><token>ID</token> + 
<declaration-a>declaration-a<fun-declaration>fun-declaration<token>(</token> + 
<params>params<token>int</token> + 
<token>ID</token> + 
<param-a>param-a<token>EPSILON</token> + 
</param-a><param-list>param-list<token>,</token> + 
<param>param<type-specifier>type-specifier<token>int</token> + 
</type-specifier><token>ID</token> + 
<param-a>param-a<token>EPSILON</token> + 
</param-a></param><param-list>param-list<token>EPSILON</token> + 
</param-list></param-list></params><token>)</token> + 
<compound-stmt>compound-stmt<token>{</token> + 
<declaration-list>declaration-list<token>EPSILON</token> + 
</declaration-list><statement-list>statement-list<statement>statement<selection-stmt>selection-stmt<token>if</token> + 
<token>(</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<relop>relop<token>&amp;lt;</token> + 
</relop><additive-expression>additive-expression<term>term<factor>factor<token>NUM</token> + 
</factor><term-a>term-a<token>EPSILON</token> + 
</term-a></term><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a></additive-expression></simple-expression></expression-b></expression-a></expression><token>)</token> + 
<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<call>call<token>(</token> + 
<args>args<arg-list>arg-list<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression><arg-list-a>arg-list-a<token>EPSILON</token> + 
</arg-list-a></arg-list></args><token>)</token> + 
</call><term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-a></expression><token>;</token> + 
</expression-stmt></statement><token>else</token> + 
<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<call>call<token>(</token> + 
<args>args<arg-list>arg-list<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression><arg-list-a>arg-list-a<token>EPSILON</token> + 
</arg-list-a></arg-list></args><token>)</token> + 
</call><term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-a></expression><token>;</token> + 
</expression-stmt></statement></selection-stmt></statement><statement-list>statement-list<token>EPSILON</token> + 
</statement-list></statement-list><token>}</token> + 
</compound-stmt></fun-declaration></declaration-a></declaration><declaration-list>declaration-list<declaration>declaration<type-specifier>type-specifier<token>int</token> + 
</type-specifier><token>ID</token> + 
<declaration-a>declaration-a<var-declaration>var-declaration<token>;</token> + 
</var-declaration></declaration-a></declaration><declaration-list>declaration-list<declaration>declaration<type-specifier>type-specifier<token>int</token> + 
</type-specifier><token>ID</token> + 
<declaration-a>declaration-a<fun-declaration>fun-declaration<token>(</token> + 
<params>params<token>void</token> + 
<params-a>params-a<token>EPSILON</token> + 
</params-a></params><token>)</token> + 
<compound-stmt>compound-stmt<token>{</token> + 
<declaration-list>declaration-list<declaration>declaration<type-specifier>type-specifier<token>int</token> + 
</type-specifier><token>ID</token> + 
<declaration-a>declaration-a<var-declaration>var-declaration<token>;</token> + 
</var-declaration></declaration-a></declaration><declaration-list>declaration-list<token>EPSILON</token> + 
</declaration-list></declaration-list><statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<token>=</token> + 
<expression>expression<token>NUM</token> + 
<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression></expression-b></expression-a></expression><token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<statement>statement<switch-stmt>switch-stmt<token>switch</token> + 
<token>(</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression><token>)</token> + 
<token>{</token> + 
<case-stmts>case-stmts<case-stmt>case-stmt<token>case</token> + 
<token>NUM</token> + 
<token>:</token> + 
<statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<token>=</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression></expression-b></expression-a></expression><token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<token>break</token> + 
<token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<token>EPSILON</token> + 
</statement-list></statement-list></statement-list></case-stmt><case-stmts>case-stmts<case-stmt>case-stmt<token>case</token> + 
<token>NUM</token> + 
<token>:</token> + 
<statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<token>=</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<addop>addop<token>-</token> + 
</addop><term>term<factor>factor<token>NUM</token> + 
</factor></term></additive-expression-a></expression-b></expression-a></expression></expression-b></expression-a></expression></expression-stmt></statement><statement-list>statement-list<token>EPSILON</token> + 
</statement-list></statement-list></case-stmt><case-stmts>case-stmts<case-stmt>case-stmt<token>case</token> + 
<token>NUM</token> + 
<token>:</token> + 
<statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<token>=</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<addop>addop<token>+</token> + 
</addop><term>term<factor>factor<token>NUM</token> + 
</factor></term></additive-expression-a></expression-b></expression-a></expression></expression-b></expression-a></expression></expression-stmt></statement><statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<token>break</token> + 
<token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<token>EPSILON</token> + 
</statement-list></statement-list></statement-list></case-stmt><case-stmts>case-stmts<token>EPSILON</token> + 
</case-stmts></case-stmts></case-stmts></case-stmts><default-stmt>default-stmt<token>default</token> + 
<token>:</token> + 
<statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<token>=</token> + 
<expression>expression<token>NUM</token> + 
<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression></expression-b></expression-a></expression><token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<token>EPSILON</token> + 
</statement-list></statement-list></default-stmt><token>}</token> + 
</switch-stmt></statement><statement-list>statement-list<statement>statement<return-stmt>return-stmt<token>return</token> + 
<return-stmt-a>return-stmt-a<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression><token>;</token> + 
</return-stmt-a></return-stmt></statement><statement-list>statement-list<token>EPSILON</token> + 
</statement-list></statement-list></statement-list></statement-list><token>}</token> + 
</compound-stmt></fun-declaration></declaration-a></declaration><declaration-list>declaration-list<token>EPSILON</token> + 
</declaration-list></declaration-list></declaration-list></declaration-list><statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<token>=</token> + 
<expression>expression<token>NUM</token> + 
<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression></expression-b></expression-a></expression><token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<token>=</token> + 
<expression>expression<token>NUM</token> + 
<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression></expression-b></expression-a></expression><token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<call>call<token>(</token> + 
<args>args<arg-list>arg-list<expression>expression<token>ID</token> + 
<expression-a>expression-a<call>call<token>(</token> + 
<args>args<token>EPSILON</token> + 
</args><token>)</token> + 
</call><term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-a></expression><arg-list-a>arg-list-a<token>,</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression><arg-list-a>arg-list-a<token>EPSILON</token> + 
</arg-list-a></arg-list-a></arg-list></args><token>)</token> + 
</call><term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-a></expression><token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<statement>statement<return-stmt>return-stmt<token>return</token> + 
<return-stmt-a>return-stmt-a<expression>expression<token>NUM</token> + 
<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression><token>;</token> + 
</return-stmt-a></return-stmt></statement><statement-list>statement-list<token>EPSILON</token> + 
</statement-list></statement-list></statement-list></statement-list></statement-list><token>}</token> + 
</compound-stmt></fun-declaration></declaration-a></declaration><declaration-list>declaration-list<declaration>declaration<type-specifier>type-specifier<token>int</token> + 
</type-specifier><token>ID</token> + 
<declaration-a>declaration-a<var-declaration>var-declaration<token>[</token> + 
<token>NUM</token> + 
<token>]</token> + 
<token>;</token> + 
</var-declaration></declaration-a></declaration><declaration-list>declaration-list<declaration>declaration<type-specifier>type-specifier<token>void</token> + 
</type-specifier><token>ID</token> + 
<declaration-a>declaration-a<fun-declaration>fun-declaration<token>(</token> + 
<params>params<token>void</token> + 
<params-a>params-a<token>EPSILON</token> + 
</params-a></params><token>)</token> + 
<compound-stmt>compound-stmt<token>{</token> + 
<declaration-list>declaration-list<declaration>declaration<type-specifier>type-specifier<token>int</token> + 
</type-specifier><token>ID</token> + 
<declaration-a>declaration-a<var-declaration>var-declaration<token>;</token> + 
</var-declaration></declaration-a></declaration><declaration-list>declaration-list<token>EPSILON</token> + 
</declaration-list></declaration-list><statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<token>=</token> + 
<expression>expression<token>NUM</token> + 
<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression></expression-b></expression-a></expression><token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<statement>statement<selection-stmt>selection-stmt<token>if</token> + 
<token>(</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<call>call<token>(</token> + 
<args>args<arg-list>arg-list<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression><arg-list-a>arg-list-a<token>EPSILON</token> + 
</arg-list-a></arg-list></args><token>)</token> + 
</call><term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-a></expression><token>)</token> + 
<statement>statement<return-stmt>return-stmt<token>return</token> + 
<return-stmt-a>return-stmt-a<token>;</token> + 
</return-stmt-a></return-stmt></statement></selection-stmt></statement><statement-list>statement-list<statement>statement<iteration-stmt>iteration-stmt<token>while</token> + 
<token>(</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression><token>)</token> + 
<statement>statement<compound-stmt>compound-stmt<token>{</token> + 
<declaration-list>declaration-list<token>EPSILON</token> + 
</declaration-list><statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>[</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<token>=</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<addop>addop<token>-</token> + 
</addop><term>term<factor>factor<token>NUM</token> + 
</factor><term-a>term-a<token>EPSILON</token> + 
</term-a></term><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a></additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression></expression-b></expression-a></expression><token>]</token> + 
</var><expression-b>expression-b<token>=</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression></expression-b></expression-a></expression><token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>NUM</token> + 
<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression><token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<statement>statement<expression-stmt>expression-stmt<expression>expression<token>ID</token> + 
<expression-a>expression-a<call>call<token>(</token> + 
<args>args<arg-list>arg-list<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>[</token> + 
<expression>expression<token>ID</token> + 
<expression-a>expression-a<var>var<token>EPSILON</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression><token>]</token> + 
</var><expression-b>expression-b<term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-b></expression-a></expression><arg-list-a>arg-list-a<token>EPSILON</token> + 
</arg-list-a></arg-list></args><token>)</token> + 
</call><term-a>term-a<token>EPSILON</token> + 
</term-a><additive-expression-a>additive-expression-a<token>EPSILON</token> + 
</additive-expression-a><simple-expression>simple-expression<token>EPSILON</token> + 
</simple-expression></expression-a></expression><token>;</token> + 
</expression-stmt></statement><statement-list>statement-list<token>EPSILON</token> + 
</statement-list></statement-list></statement-list></statement-list><token>}</token> + 
</compound-stmt></statement></iteration-stmt></statement><statement-list>statement-list<token>EPSILON</token> + 
</statement-list></statement-list></statement-list></statement-list><token>}</token> + 
</compound-stmt></fun-declaration></declaration-a></declaration><declaration-list>declaration-list<token>EPSILON</token> + 
</declaration-list></declaration-list></declaration-list></declaration-list></declaration-list><token>EOF</token> + 
</program>