Rules ,Non-Terminal,First,Follow
program → declaration-list EOF,program,"EOF, EPSILON, int, void",$
declaration-list → declaration declaration-list | ε,declaration-list,"EPSILON, int, void","(, ;, EOF, ID, NUM, break, continue, if, return, switch, while, {"
declaration → type-specifier ID declaration-a,declaration,"int, void","(, ;, EOF, ID, NUM, break, continue, if, int, return, switch, void, while, {"
declaration-a → var-declaration | fun-declaration,declaration-a,"(, ;, [","(, ;, EOF, ID, NUM, break, continue, if, int, return, switch, void, while, {"
var-declaration → ; | [ NUM ] ;,var-declaration,";, [","(, ;, EOF, ID, NUM, break, continue, if, int, return, switch, void, while, {"
type-specifier → int | void,type-specifier,"int, void",ID
fun-declaration → ( params ) compound-stmt,fun-declaration,(,"(, ;, EOF, ID, NUM, break, continue, if, int, return, switch, void, while, {"
params → void params-a | int ID param-a param-list,params,"int, void",)
params-a → ID param-a param-list | ε,params-a,"EPSILON, ID",)
"param-list → , param param-list | ε",param-list,",, EPSILON",)
param → type-specifier ID param-a,param,"int, void","), ,"
param-a → ε | [ ],param-a,"EPSILON, [","), ,"
compound-stmt → { declaration-list statement-list },compound-stmt,{,"(, ;, EOF, ID, NUM, break, case, continue, default, else, if, int, return, switch, void, while, {, }"
statement-list → statement statement-list | ε,statement-list,"(, ;, EPSILON, ID, NUM, break, continue, if, return, switch, while, {","case, default, }"
statement → expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt | switch-stmt,statement,"(, ;, ID, NUM, break, continue, if, return, switch, while, {","(, ;, ID, NUM, break, case, continue, default, else, if, return, switch, while, {, }"
expression-stmt → expression ; | continue ; | break ; | ;,expression-stmt,"(, ;, ID, NUM, break, continue","(, ;, ID, NUM, break, case, continue, default, else, if, return, switch, while, {, }"
selection-stmt → if ( expression ) statement else statement,selection-stmt,if,"(, ;, ID, NUM, break, case, continue, default, else, if, return, switch, while, {, }"
iteration-stmt → while ( expression ) statement,iteration-stmt,while,"(, ;, ID, NUM, break, case, continue, default, else, if, return, switch, while, {, }"
return-stmt → return return-stmt-a,return-stmt,return,"(, ;, ID, NUM, break, case, continue, default, else, if, return, switch, while, {, }"
return-stmt-a → ; | expression ;,return-stmt-a,"(, ;, ID, NUM","(, ;, ID, NUM, break, case, continue, default, else, if, return, switch, while, {, }"
switch-stmt → switch ( expression ) { case-stmts default-stmt },switch-stmt,switch,"(, ;, ID, NUM, break, case, continue, default, else, if, return, switch, while, {, }"
case-stmts → case-stmt case-stmts | ε,case-stmts,"EPSILON, case",default
case-stmt → case NUM : statement-list,case-stmt,case,"case, default"
default-stmt → default : statement-list | ε,default-stmt,"EPSILON, default",}
expression → ID expression-a | ( expression ) term-a additive-expression-a simple-expression | NUM term-a additive-expression-a simple-expression,expression,"(, ID, NUM","), ,, ;, ]"
expression-a → var expression-b | call term-a additive-expression-a simple-expression,expression-a,"(, *, +, -, <, =, ==, EPSILON, [","), ,, ;, ]"
expression-b → term-a additive-expression-a simple-expression | = expression,expression-b,"*, +, -, <, =, ==, EPSILON","), ,, ;, ]"
var → ε | [ expression ],var,"EPSILON, [","), *, +, ,, -, ;, <, =, ==, ]"
simple-expression → relop additive-expression | ε,simple-expression,"<, ==, EPSILON","), ,, ;, ]"
relop → < | ==,relop,"<, ==","(, ID, NUM"
additive-expression → term additive-expression-a,additive-expression,"(, ID, NUM","), ,, ;, ]"
additive-expression-a → addop term additive-expression-a | ε,additive-expression-a,"+, -, EPSILON","), ,, ;, <, ==, ]"
addop → + | -,addop,"+, -","(, ID, NUM"
term → factor term-a,term,"(, ID, NUM","), +, ,, -, ;, <, ==, ]"
term-a → * factor term-a | ε,term-a,"*, EPSILON","), +, ,, -, ;, <, ==, ]"
factor → ( expression ) | ID factor-a | NUM,factor,"(, ID, NUM","), *, +, ,, -, ;, <, ==, ]"
factor-a → var | call,factor-a,"(, EPSILON, [","), *, +, ,, -, ;, <, ==, ]"
call → ( args ),call,(,"), *, +, ,, -, ;, <, ==, ]"
args → arg-list | ε,args,"(, EPSILON, ID, NUM",)
arg-list → expression arg-list-a,arg-list,"(, ID, NUM",)
"arg-list-a → , expression arg-list-a | ε",arg-list-a,",, EPSILON",)
