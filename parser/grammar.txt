program → declaration-list #jp_main EOF
declaration-list → declaration declaration-list | ε
declaration → type-specifier ID #id declaration-a
declaration-a → var-declaration #set_to_var | fun-declaration #set_to_func
var-declaration → ; | [ NUM ] ;
type-specifier → int #push_int | void #push_void
fun-declaration → ( #inc_scope params ) compound-stmt #dec_scope
params → void params-a | int ID param-a #save_symbol param-list
params-a → ID param-a #save_symbol param-list | ε
param-list → , param param-list | ε
param → type-specifier ID param-a
param-a → ε | [ ]
compound-stmt → { #inc_scope declaration-list statement-list } #dec_scope
statement-list → statement statement-list | ε
statement → expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt | switch-stmt
expression-stmt → expression ; | continue ; | break #break_save ; | ;
selection-stmt → if ( expression #save ) statement #jpf_save else statement #jp
iteration-stmt → while #push_while ( #label expression ) #save statement #while_break_pop
return-stmt → return return-stmt-a
return-stmt-a → ; | expression ;
switch-stmt → switch ( #push_switch expression ) { case-stmts default-stmt } #jp_break_pop
case-stmts → case-stmt #jpf case-stmts | ε
case-stmt → case NUM #cmp_save : statement-list
default-stmt → default : statement-list | ε
expression → ID #pid expression-a | ( expression ) term-a additive-expression-a simple-expression | NUM #push_imm term-a additive-expression-a simple-expression
expression-a → var expression-b | call term-a additive-expression-a simple-expression
expression-b → term-a additive-expression-a simple-expression | = expression #assign
var → ε | [ expression ]
simple-expression → relop additive-expression | ε
relop → < | ==
additive-expression → term additive-expression-a
additive-expression-a → addop term #add additive-expression-a | ε
addop → + #push_plus | - #push_minus
term → factor term-a
term-a → * factor #mult term-a | ε
factor → ( expression ) | ID #pid factor-a | NUM #push_imm
factor-a → var | call
call → ( #push_arg args ) #call
args → arg-list | ε
arg-list → expression arg-list-a
arg-list-a → , expression arg-list-a | ε

